//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MerkDataBaseBusinessLogicProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MerkFinanceEntities : DbContext
    {
        public MerkFinanceEntities()
            : base("name=MerkFinanceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountingJournalEntryTransaction> AccountingJournalEntryTransactions { get; set; }
        public virtual DbSet<AccountingJournalTransaction> AccountingJournalTransactions { get; set; }
        public virtual DbSet<ActiveSalaryEffect_cu> ActiveSalaryEffect_cu { get; set; }
        public virtual DbSet<Address_cu> Address_cu { get; set; }
        public virtual DbSet<AddressRefrenceType_cu> AddressRefrenceType_cu { get; set; }
        public virtual DbSet<Application_p> Application_p { get; set; }
        public virtual DbSet<Bank_cu> Bank_cu { get; set; }
        public virtual DbSet<BankAccount_cu> BankAccount_cu { get; set; }
        public virtual DbSet<CashBox_cu> CashBox_cu { get; set; }
        public virtual DbSet<CashBoxInOutTransaction> CashBoxInOutTransactions { get; set; }
        public virtual DbSet<CashBoxInOutTransaction_AccountingJournalTransaction> CashBoxInOutTransaction_AccountingJournalTransaction { get; set; }
        public virtual DbSet<CashBoxTransactionType_GeneralChartOfAccountType_cu> CashBoxTransactionType_GeneralChartOfAccountType_cu { get; set; }
        public virtual DbSet<CashBoxTransactionType_GeneralChartOfAccountType_p> CashBoxTransactionType_GeneralChartOfAccountType_p { get; set; }
        public virtual DbSet<CashBoxTransactionType_p> CashBoxTransactionType_p { get; set; }
        public virtual DbSet<ChartOfAccount_cu> ChartOfAccount_cu { get; set; }
        public virtual DbSet<ChartOfAccount_FinancialStatementElement_cu> ChartOfAccount_FinancialStatementElement_cu { get; set; }
        public virtual DbSet<ChartOfAccount_GeneralChartOfAccountType_cu> ChartOfAccount_GeneralChartOfAccountType_cu { get; set; }
        public virtual DbSet<ChartOfAccountBalance> ChartOfAccountBalances { get; set; }
        public virtual DbSet<ChartOfAccountCodeMargin_p> ChartOfAccountCodeMargin_p { get; set; }
        public virtual DbSet<City_cu> City_cu { get; set; }
        public virtual DbSet<Color_cu> Color_cu { get; set; }
        public virtual DbSet<CommonTransactionType_p> CommonTransactionType_p { get; set; }
        public virtual DbSet<Country_cu> Country_cu { get; set; }
        public virtual DbSet<Currency_cu> Currency_cu { get; set; }
        public virtual DbSet<Customer_cu> Customer_cu { get; set; }
        public virtual DbSet<CustomerPaymentTransaction> CustomerPaymentTransactions { get; set; }
        public virtual DbSet<CustomerType_p> CustomerType_p { get; set; }
        public virtual DbSet<DBVersion> DBVersions { get; set; }
        public virtual DbSet<Department_cu> Department_cu { get; set; }
        public virtual DbSet<Department_JobTitle_cu> Department_JobTitle_cu { get; set; }
        public virtual DbSet<Department_JobTitle_WorkingShiftTitle_cu> Department_JobTitle_WorkingShiftTitle_cu { get; set; }
        public virtual DbSet<DepartmentType_p> DepartmentType_p { get; set; }
        public virtual DbSet<DiabetedMedicationType_p> DiabetedMedicationType_p { get; set; }
        public virtual DbSet<DiabetesType_p> DiabetesType_p { get; set; }
        public virtual DbSet<Diagnosis_cu> Diagnosis_cu { get; set; }
        public virtual DbSet<DiagnosisCategory_cu> DiagnosisCategory_cu { get; set; }
        public virtual DbSet<DiagnosisCategory_Diagnosis_cu> DiagnosisCategory_Diagnosis_cu { get; set; }
        public virtual DbSet<DiagnosisType_p> DiagnosisType_p { get; set; }
        public virtual DbSet<DiscountType_p> DiscountType_p { get; set; }
        public virtual DbSet<DividedByType_p> DividedByType_p { get; set; }
        public virtual DbSet<Doctor_cu> Doctor_cu { get; set; }
        public virtual DbSet<Doctor_Diagnosis_cu> Doctor_Diagnosis_cu { get; set; }
        public virtual DbSet<Doctor_DiagnosisCategory_cu> Doctor_DiagnosisCategory_cu { get; set; }
        public virtual DbSet<Doctor_Service_cu> Doctor_Service_cu { get; set; }
        public virtual DbSet<Doctor_StationPointStage_cu> Doctor_StationPointStage_cu { get; set; }
        public virtual DbSet<Doctor_Symptoms_cu> Doctor_Symptoms_cu { get; set; }
        public virtual DbSet<Doctor_SymptomsCategory_cu> Doctor_SymptomsCategory_cu { get; set; }
        public virtual DbSet<DoctorCategory_cu> DoctorCategory_cu { get; set; }
        public virtual DbSet<DoctorFeesService_cu> DoctorFeesService_cu { get; set; }
        public virtual DbSet<DoctorProfessionalFeesIssuingType_p> DoctorProfessionalFeesIssuingType_p { get; set; }
        public virtual DbSet<DoctorRank_p> DoctorRank_p { get; set; }
        public virtual DbSet<DoctorSpecialization_p> DoctorSpecialization_p { get; set; }
        public virtual DbSet<DoctorTaxType_cu> DoctorTaxType_cu { get; set; }
        public virtual DbSet<Dose_cu> Dose_cu { get; set; }
        public virtual DbSet<Employee_cu> Employee_cu { get; set; }
        public virtual DbSet<Employee_Department_JobTitle_cu> Employee_Department_JobTitle_cu { get; set; }
        public virtual DbSet<Employee_WorkingShift_cu> Employee_WorkingShift_cu { get; set; }
        public virtual DbSet<Employee_WorkingShiftTitle_cu> Employee_WorkingShiftTitle_cu { get; set; }
        public virtual DbSet<EmployeeType_cu> EmployeeType_cu { get; set; }
        public virtual DbSet<EmploymentDate_cu> EmploymentDate_cu { get; set; }
        public virtual DbSet<EmploymentDateType_p> EmploymentDateType_p { get; set; }
        public virtual DbSet<Eye_p> Eye_p { get; set; }
        public virtual DbSet<FinanceInvoice> FinanceInvoices { get; set; }
        public virtual DbSet<FinanceInvoiceDetail> FinanceInvoiceDetails { get; set; }
        public virtual DbSet<FinanceInvoicePayment> FinanceInvoicePayments { get; set; }
        public virtual DbSet<FinanceInvoiceShare> FinanceInvoiceShares { get; set; }
        public virtual DbSet<FinancialInterval_cu> FinancialInterval_cu { get; set; }
        public virtual DbSet<FinancialInterval_Month_cu> FinancialInterval_Month_cu { get; set; }
        public virtual DbSet<FinancialStatementElement_cu> FinancialStatementElement_cu { get; set; }
        public virtual DbSet<FinancialStatementElement_p> FinancialStatementElement_p { get; set; }
        public virtual DbSet<FinancialTransactionType_p> FinancialTransactionType_p { get; set; }
        public virtual DbSet<Floor_cu> Floor_cu { get; set; }
        public virtual DbSet<GeneralChartOfAccountType_cu> GeneralChartOfAccountType_cu { get; set; }
        public virtual DbSet<GeneralChartOfAccountType_p> GeneralChartOfAccountType_p { get; set; }
        public virtual DbSet<HeightUnit_p> HeightUnit_p { get; set; }
        public virtual DbSet<IdentificationCardType_p> IdentificationCardType_p { get; set; }
        public virtual DbSet<ImageType_p> ImageType_p { get; set; }
        public virtual DbSet<InPatientAdmissionPricingType_p> InPatientAdmissionPricingType_p { get; set; }
        public virtual DbSet<InPatientRoom_cu> InPatientRoom_cu { get; set; }
        public virtual DbSet<InPatientRoom_InPatientAdmissionPricingType_cu> InPatientRoom_InPatientAdmissionPricingType_cu { get; set; }
        public virtual DbSet<InPatientRoomBed_cu> InPatientRoomBed_cu { get; set; }
        public virtual DbSet<InPatientRoomBed_InPatientAdmissionPricingType_cu> InPatientRoomBed_InPatientAdmissionPricingType_cu { get; set; }
        public virtual DbSet<InPatientRoomBedStatus_p> InPatientRoomBedStatus_p { get; set; }
        public virtual DbSet<InPatientRoomClassification_cu> InPatientRoomClassification_cu { get; set; }
        public virtual DbSet<InPatientRoomClassification_InPatientAdmissionPricingType_cu> InPatientRoomClassification_InPatientAdmissionPricingType_cu { get; set; }
        public virtual DbSet<InPatientRoomType_p> InPatientRoomType_p { get; set; }
        public virtual DbSet<InsuranceCarrier_cu> InsuranceCarrier_cu { get; set; }
        public virtual DbSet<InsuranceCarrier_InsuranceLevel_cu> InsuranceCarrier_InsuranceLevel_cu { get; set; }
        public virtual DbSet<InsuranceLevel_cu> InsuranceLevel_cu { get; set; }
        public virtual DbSet<InventoryHousing_cu> InventoryHousing_cu { get; set; }
        public virtual DbSet<InventoryItem_Area> InventoryItem_Area { get; set; }
        public virtual DbSet<InventoryItem_cu> InventoryItem_cu { get; set; }
        public virtual DbSet<InventoryItem_Printing_cu> InventoryItem_Printing_cu { get; set; }
        public virtual DbSet<InventoryItem_RawMaterial_cu> InventoryItem_RawMaterial_cu { get; set; }
        public virtual DbSet<InventoryItem_UnitMeasurment_cu> InventoryItem_UnitMeasurment_cu { get; set; }
        public virtual DbSet<InventoryItemBrand_cu> InventoryItemBrand_cu { get; set; }
        public virtual DbSet<InventoryItemCategory_cu> InventoryItemCategory_cu { get; set; }
        public virtual DbSet<InventoryItemGroup_cu> InventoryItemGroup_cu { get; set; }
        public virtual DbSet<InventoryItemGroup_InventoryItem_cu> InventoryItemGroup_InventoryItem_cu { get; set; }
        public virtual DbSet<InventoryItemPrice_cu> InventoryItemPrice_cu { get; set; }
        public virtual DbSet<InventoryItemTransaction> InventoryItemTransactions { get; set; }
        public virtual DbSet<InventoryItemTransactionType_p> InventoryItemTransactionType_p { get; set; }
        public virtual DbSet<InventoryItemType_p> InventoryItemType_p { get; set; }
        public virtual DbSet<InventoryTrackingType_p> InventoryTrackingType_p { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceCostingStrategy_p> InvoiceCostingStrategy_p { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<InvoiceDetail_Accommodation> InvoiceDetail_Accommodation { get; set; }
        public virtual DbSet<InvoiceDetail_DoctorFees> InvoiceDetail_DoctorFees { get; set; }
        public virtual DbSet<InvoiceDetail_Inventory> InvoiceDetail_Inventory { get; set; }
        public virtual DbSet<InvoiceDiscount> InvoiceDiscounts { get; set; }
        public virtual DbSet<InvoicePayment> InvoicePayments { get; set; }
        public virtual DbSet<InvoicePayment_Check> InvoicePayment_Check { get; set; }
        public virtual DbSet<InvoicePayment_Visa> InvoicePayment_Visa { get; set; }
        public virtual DbSet<InvoicePaymentType_p> InvoicePaymentType_p { get; set; }
        public virtual DbSet<InvoiceRequestedAmount> InvoiceRequestedAmounts { get; set; }
        public virtual DbSet<InvoiceShare> InvoiceShares { get; set; }
        public virtual DbSet<InvoiceType_p> InvoiceType_p { get; set; }
        public virtual DbSet<InvoiceType_Surcharge_cu> InvoiceType_Surcharge_cu { get; set; }
        public virtual DbSet<JobTitle_cu> JobTitle_cu { get; set; }
        public virtual DbSet<Location_cu> Location_cu { get; set; }
        public virtual DbSet<Manager_cu> Manager_cu { get; set; }
        public virtual DbSet<MaritalStatus_p> MaritalStatus_p { get; set; }
        public virtual DbSet<MedicalFlow_p> MedicalFlow_p { get; set; }
        public virtual DbSet<MedicalStage_cu> MedicalStage_cu { get; set; }
        public virtual DbSet<Medication_cu> Medication_cu { get; set; }
        public virtual DbSet<Medication_Dose_cu> Medication_Dose_cu { get; set; }
        public virtual DbSet<MedicationCategory_cu> MedicationCategory_cu { get; set; }
        public virtual DbSet<MilitaryStatus_p> MilitaryStatus_p { get; set; }
        public virtual DbSet<Month_p> Month_p { get; set; }
        public virtual DbSet<NearVisiong_p> NearVisiong_p { get; set; }
        public virtual DbSet<Organization_p> Organization_p { get; set; }
        public virtual DbSet<OrganizationMachine_cu> OrganizationMachine_cu { get; set; }
        public virtual DbSet<OrganizationMachine_StationPoint_cu> OrganizationMachine_StationPoint_cu { get; set; }
        public virtual DbSet<PainLevel_p> PainLevel_p { get; set; }
        public virtual DbSet<Patient_cu> Patient_cu { get; set; }
        public virtual DbSet<PatientAttachment_cu> PatientAttachment_cu { get; set; }
        public virtual DbSet<PatientDepositeBalance> PatientDepositeBalances { get; set; }
        public virtual DbSet<PaymentType_p> PaymentType_p { get; set; }
        public virtual DbSet<PEM_ElementPrintOrder_cu> PEM_ElementPrintOrder_cu { get; set; }
        public virtual DbSet<PEMR_Elemet_p> PEMR_Elemet_p { get; set; }
        public virtual DbSet<PEMRSavingMode_p> PEMRSavingMode_p { get; set; }
        public virtual DbSet<PEMRSavingMode_User_cu> PEMRSavingMode_User_cu { get; set; }
        public virtual DbSet<Person_ChartOfAccount_cu> Person_ChartOfAccount_cu { get; set; }
        public virtual DbSet<Person_cu> Person_cu { get; set; }
        public virtual DbSet<Person_IdentificationCardType_cu> Person_IdentificationCardType_cu { get; set; }
        public virtual DbSet<Person_Phone_cu> Person_Phone_cu { get; set; }
        public virtual DbSet<PersonChartOtAccountType_p> PersonChartOtAccountType_p { get; set; }
        public virtual DbSet<PersonRelativeType_p> PersonRelativeType_p { get; set; }
        public virtual DbSet<PersonTitle_p> PersonTitle_p { get; set; }
        public virtual DbSet<PersonType_ChartOfAccount_cu> PersonType_ChartOfAccount_cu { get; set; }
        public virtual DbSet<PersonType_p> PersonType_p { get; set; }
        public virtual DbSet<PhoneType_p> PhoneType_p { get; set; }
        public virtual DbSet<PriceType_p> PriceType_p { get; set; }
        public virtual DbSet<PupillaryAbnormalities_cu> PupillaryAbnormalities_cu { get; set; }
        public virtual DbSet<PupillaryRAPDCauses_cu> PupillaryRAPDCauses_cu { get; set; }
        public virtual DbSet<PupillaryRAPDGradingScale_p> PupillaryRAPDGradingScale_p { get; set; }
        public virtual DbSet<PupillaryShape_p> PupillaryShape_p { get; set; }
        public virtual DbSet<PupillarySize_p> PupillarySize_p { get; set; }
        public virtual DbSet<QueueManager> QueueManagers { get; set; }
        public virtual DbSet<QueueManagerStatus_p> QueueManagerStatus_p { get; set; }
        public virtual DbSet<RawMaterials_cu> RawMaterials_cu { get; set; }
        public virtual DbSet<RawMaterialTranasction> RawMaterialTranasctions { get; set; }
        public virtual DbSet<RawMaterialTranasctionType_p> RawMaterialTranasctionType_p { get; set; }
        public virtual DbSet<RawMaterialType_p> RawMaterialType_p { get; set; }
        public virtual DbSet<Region_cu> Region_cu { get; set; }
        public virtual DbSet<Religion_p> Religion_p { get; set; }
        public virtual DbSet<Role_p> Role_p { get; set; }
        public virtual DbSet<RoleRegistration_cu> RoleRegistration_cu { get; set; }
        public virtual DbSet<SegmentSign_cu> SegmentSign_cu { get; set; }
        public virtual DbSet<SegmentSignCategory_cu> SegmentSignCategory_cu { get; set; }
        public virtual DbSet<SegmentSignType_p> SegmentSignType_p { get; set; }
        public virtual DbSet<ServerDirectory_p> ServerDirectory_p { get; set; }
        public virtual DbSet<Service_ChartOfAccount_cu> Service_ChartOfAccount_cu { get; set; }
        public virtual DbSet<Service_cu> Service_cu { get; set; }
        public virtual DbSet<Service_StationPoint_cu> Service_StationPoint_cu { get; set; }
        public virtual DbSet<Service_StationPointStage_cu> Service_StationPointStage_cu { get; set; }
        public virtual DbSet<Service_Surcharge_cu> Service_Surcharge_cu { get; set; }
        public virtual DbSet<ServiceCategory_cu> ServiceCategory_cu { get; set; }
        public virtual DbSet<ServiceCategory_StationPoint_cu> ServiceCategory_StationPoint_cu { get; set; }
        public virtual DbSet<ServiceCategory_StationPointStage_cu> ServiceCategory_StationPointStage_cu { get; set; }
        public virtual DbSet<ServiceCategory_Surcharge_cu> ServiceCategory_Surcharge_cu { get; set; }
        public virtual DbSet<ServicePrice_cu> ServicePrice_cu { get; set; }
        public virtual DbSet<ServiceType_ChartOfAccount_cu> ServiceType_ChartOfAccount_cu { get; set; }
        public virtual DbSet<ServiceType_p> ServiceType_p { get; set; }
        public virtual DbSet<ServiceType_StationPoint_cu> ServiceType_StationPoint_cu { get; set; }
        public virtual DbSet<ServiceType_StationPointStage_cu> ServiceType_StationPointStage_cu { get; set; }
        public virtual DbSet<ServiceType_Surcharge_cu> ServiceType_Surcharge_cu { get; set; }
        public virtual DbSet<Station_p> Station_p { get; set; }
        public virtual DbSet<StationPoint_cu> StationPoint_cu { get; set; }
        public virtual DbSet<StationPointStage_cu> StationPointStage_cu { get; set; }
        public virtual DbSet<Supplier_cu> Supplier_cu { get; set; }
        public virtual DbSet<SupplierType_p> SupplierType_p { get; set; }
        public virtual DbSet<Surcharge_cu> Surcharge_cu { get; set; }
        public virtual DbSet<SurchargeType_p> SurchargeType_p { get; set; }
        public virtual DbSet<Symptoms_cu> Symptoms_cu { get; set; }
        public virtual DbSet<SymptomsCategory_cu> SymptomsCategory_cu { get; set; }
        public virtual DbSet<SymptomsCategory_Symptoms_cu> SymptomsCategory_Symptoms_cu { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TableIdentity> TableIdentities { get; set; }
        public virtual DbSet<TemperatureUnit_p> TemperatureUnit_p { get; set; }
        public virtual DbSet<Terriotry_cu> Terriotry_cu { get; set; }
        public virtual DbSet<TimeDuration_p> TimeDuration_p { get; set; }
        public virtual DbSet<ToBeInserted_cu> ToBeInserted_cu { get; set; }
        public virtual DbSet<TrialBalanceTransaction> TrialBalanceTransactions { get; set; }
        public virtual DbSet<TrialBalanceTransactionType_p> TrialBalanceTransactionType_p { get; set; }
        public virtual DbSet<TriggerOfDrugAllergy_cu> TriggerOfDrugAllergy_cu { get; set; }
        public virtual DbSet<UncorrectedDistanceVisualAcuity_cu> UncorrectedDistanceVisualAcuity_cu { get; set; }
        public virtual DbSet<UncorrectedDistanceVisualAcuityUnit_p> UncorrectedDistanceVisualAcuityUnit_p { get; set; }
        public virtual DbSet<UnitMeasurment_cu> UnitMeasurment_cu { get; set; }
        public virtual DbSet<UnitMeasurment_p> UnitMeasurment_p { get; set; }
        public virtual DbSet<UnitMeasurmentTreeLink_cu> UnitMeasurmentTreeLink_cu { get; set; }
        public virtual DbSet<User_Application_cu> User_Application_cu { get; set; }
        public virtual DbSet<User_cu> User_cu { get; set; }
        public virtual DbSet<User_UserGroup_cu> User_UserGroup_cu { get; set; }
        public virtual DbSet<UserGroup_Application_cu> UserGroup_Application_cu { get; set; }
        public virtual DbSet<UserGroup_cu> UserGroup_cu { get; set; }
        public virtual DbSet<VisionRefractionReadingType_p> VisionRefractionReadingType_p { get; set; }
        public virtual DbSet<VisitAssessmentTopic_p> VisitAssessmentTopic_p { get; set; }
        public virtual DbSet<VisitTiming> VisitTimings { get; set; }
        public virtual DbSet<VisitTiming_AdnexaSegmentSign> VisitTiming_AdnexaSegmentSign { get; set; }
        public virtual DbSet<VisitTiming_AnteriorSegmentSign> VisitTiming_AnteriorSegmentSign { get; set; }
        public virtual DbSet<VisitTiming_Attachment> VisitTiming_Attachment { get; set; }
        public virtual DbSet<VisitTiming_Diagnosis> VisitTiming_Diagnosis { get; set; }
        public virtual DbSet<VisitTiming_EOMReading> VisitTiming_EOMReading { get; set; }
        public virtual DbSet<VisitTiming_EOMSign> VisitTiming_EOMSign { get; set; }
        public virtual DbSet<VisitTiming_InvestigationReservation> VisitTiming_InvestigationReservation { get; set; }
        public virtual DbSet<VisitTiming_InvestigationResult> VisitTiming_InvestigationResult { get; set; }
        public virtual DbSet<VisitTiming_LabReservation> VisitTiming_LabReservation { get; set; }
        public virtual DbSet<VisitTiming_LabResult> VisitTiming_LabResult { get; set; }
        public virtual DbSet<VisitTiming_MainAdnexaSegmentSign> VisitTiming_MainAdnexaSegmentSign { get; set; }
        public virtual DbSet<VisitTiming_MainAnteriorSegmentSign> VisitTiming_MainAnteriorSegmentSign { get; set; }
        public virtual DbSet<VisitTiming_MainDiagnosis> VisitTiming_MainDiagnosis { get; set; }
        public virtual DbSet<VisitTiming_MainEOMSign> VisitTiming_MainEOMSign { get; set; }
        public virtual DbSet<VisitTiming_MainPosteriorSegmentSign> VisitTiming_MainPosteriorSegmentSign { get; set; }
        public virtual DbSet<VisitTiming_MainSymptoms> VisitTiming_MainSymptoms { get; set; }
        public virtual DbSet<VisitTiming_MedicalHistory> VisitTiming_MedicalHistory { get; set; }
        public virtual DbSet<VisitTiming_Medication> VisitTiming_Medication { get; set; }
        public virtual DbSet<VisitTiming_PosteriorSegmentSign> VisitTiming_PosteriorSegmentSign { get; set; }
        public virtual DbSet<VisitTiming_Pupillary> VisitTiming_Pupillary { get; set; }
        public virtual DbSet<VisitTiming_SocialHistory> VisitTiming_SocialHistory { get; set; }
        public virtual DbSet<VisitTiming_SurgeryReservation> VisitTiming_SurgeryReservation { get; set; }
        public virtual DbSet<VisitTiming_SurgeryResult> VisitTiming_SurgeryResult { get; set; }
        public virtual DbSet<VisitTiming_Symptoms> VisitTiming_Symptoms { get; set; }
        public virtual DbSet<VisitTiming_TreatmentPlan> VisitTiming_TreatmentPlan { get; set; }
        public virtual DbSet<VisitTiming_VisionRefractionReading> VisitTiming_VisionRefractionReading { get; set; }
        public virtual DbSet<VisitTiming_VitalSign> VisitTiming_VitalSign { get; set; }
        public virtual DbSet<WeightUnit_p> WeightUnit_p { get; set; }
        public virtual DbSet<WorkingShiftTitle_cu> WorkingShiftTitle_cu { get; set; }
    
        public virtual ObjectResult<GetBriefQueue_Result> GetBriefQueue(Nullable<int> stationPointStage, Nullable<int> queueManagerStatusID, Nullable<int> doctorID, Nullable<System.DateTime> invoiceCreationDate)
        {
            var stationPointStageParameter = stationPointStage.HasValue ?
                new ObjectParameter("StationPointStage", stationPointStage) :
                new ObjectParameter("StationPointStage", typeof(int));
    
            var queueManagerStatusIDParameter = queueManagerStatusID.HasValue ?
                new ObjectParameter("QueueManagerStatusID", queueManagerStatusID) :
                new ObjectParameter("QueueManagerStatusID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var invoiceCreationDateParameter = invoiceCreationDate.HasValue ?
                new ObjectParameter("InvoiceCreationDate", invoiceCreationDate) :
                new ObjectParameter("InvoiceCreationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBriefQueue_Result>("GetBriefQueue", stationPointStageParameter, queueManagerStatusIDParameter, doctorIDParameter, invoiceCreationDateParameter);
        }
    
        public virtual ObjectResult<GetCustomerBalance_Result> GetCustomerBalance(Nullable<int> customerID, Nullable<int> invoiceTypeID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerBalance_Result>("GetCustomerBalance", customerIDParameter, invoiceTypeIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerInvoices_Result> GetCustomerInvoices(Nullable<int> customerID, Nullable<bool> isOnDuty, Nullable<int> invoiceTypeID, Nullable<bool> isPaymentEnough, Nullable<bool> isFinanciallyReviewed, Nullable<bool> isFinanciallyCompleted)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var isOnDutyParameter = isOnDuty.HasValue ?
                new ObjectParameter("IsOnDuty", isOnDuty) :
                new ObjectParameter("IsOnDuty", typeof(bool));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            var isPaymentEnoughParameter = isPaymentEnough.HasValue ?
                new ObjectParameter("IsPaymentEnough", isPaymentEnough) :
                new ObjectParameter("IsPaymentEnough", typeof(bool));
    
            var isFinanciallyReviewedParameter = isFinanciallyReviewed.HasValue ?
                new ObjectParameter("IsFinanciallyReviewed", isFinanciallyReviewed) :
                new ObjectParameter("IsFinanciallyReviewed", typeof(bool));
    
            var isFinanciallyCompletedParameter = isFinanciallyCompleted.HasValue ?
                new ObjectParameter("IsFinanciallyCompleted", isFinanciallyCompleted) :
                new ObjectParameter("IsFinanciallyCompleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerInvoices_Result>("GetCustomerInvoices", customerIDParameter, isOnDutyParameter, invoiceTypeIDParameter, isPaymentEnoughParameter, isFinanciallyReviewedParameter, isFinanciallyCompletedParameter);
        }
    
        public virtual ObjectResult<GetInventoryItemAreaParts_Result> GetInventoryItemAreaParts(Nullable<int> inventoryItemID)
        {
            var inventoryItemIDParameter = inventoryItemID.HasValue ?
                new ObjectParameter("InventoryItemID", inventoryItemID) :
                new ObjectParameter("InventoryItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventoryItemAreaParts_Result>("GetInventoryItemAreaParts", inventoryItemIDParameter);
        }
    
        public virtual ObjectResult<GetInvoiceForAddmission_Result> GetInvoiceForAddmission(Nullable<System.DateTime> invoiceCreationDateStart, Nullable<System.DateTime> invoiceCreationDateEnd, Nullable<int> invoiceTypeID, Nullable<bool> invoiceIsOnDuty, Nullable<bool> invoiceIsFinanciallyReviewed, Nullable<bool> invoiceIsPrinted, Nullable<bool> invoiceIsPaymentEnough, Nullable<int> doctorID, Nullable<int> patientID)
        {
            var invoiceCreationDateStartParameter = invoiceCreationDateStart.HasValue ?
                new ObjectParameter("InvoiceCreationDateStart", invoiceCreationDateStart) :
                new ObjectParameter("InvoiceCreationDateStart", typeof(System.DateTime));
    
            var invoiceCreationDateEndParameter = invoiceCreationDateEnd.HasValue ?
                new ObjectParameter("InvoiceCreationDateEnd", invoiceCreationDateEnd) :
                new ObjectParameter("InvoiceCreationDateEnd", typeof(System.DateTime));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            var invoiceIsOnDutyParameter = invoiceIsOnDuty.HasValue ?
                new ObjectParameter("InvoiceIsOnDuty", invoiceIsOnDuty) :
                new ObjectParameter("InvoiceIsOnDuty", typeof(bool));
    
            var invoiceIsFinanciallyReviewedParameter = invoiceIsFinanciallyReviewed.HasValue ?
                new ObjectParameter("InvoiceIsFinanciallyReviewed", invoiceIsFinanciallyReviewed) :
                new ObjectParameter("InvoiceIsFinanciallyReviewed", typeof(bool));
    
            var invoiceIsPrintedParameter = invoiceIsPrinted.HasValue ?
                new ObjectParameter("InvoiceIsPrinted", invoiceIsPrinted) :
                new ObjectParameter("InvoiceIsPrinted", typeof(bool));
    
            var invoiceIsPaymentEnoughParameter = invoiceIsPaymentEnough.HasValue ?
                new ObjectParameter("InvoiceIsPaymentEnough", invoiceIsPaymentEnough) :
                new ObjectParameter("InvoiceIsPaymentEnough", typeof(bool));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoiceForAddmission_Result>("GetInvoiceForAddmission", invoiceCreationDateStartParameter, invoiceCreationDateEndParameter, invoiceTypeIDParameter, invoiceIsOnDutyParameter, invoiceIsFinanciallyReviewedParameter, invoiceIsPrintedParameter, invoiceIsPaymentEnoughParameter, doctorIDParameter, patientIDParameter);
        }
    
        public virtual ObjectResult<string> GetInvoiceNextSerial(Nullable<int> invoiceType)
        {
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetInvoiceNextSerial", invoiceTypeParameter);
        }
    
        public virtual ObjectResult<string> GetInvoicePaymentSerial()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetInvoicePaymentSerial");
        }
    
        public virtual ObjectResult<GetInvoicesPaymentBriefReport_Result> GetInvoicesPaymentBriefReport(Nullable<int> invoiceID, Nullable<int> invoiceTypeID, Nullable<int> paymentTypeID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoicesPaymentBriefReport_Result>("GetInvoicesPaymentBriefReport", invoiceIDParameter, invoiceTypeIDParameter, paymentTypeIDParameter, fromDateParameter, toDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetPatientDepositBalance_Result> GetPatientDepositBalance(Nullable<int> patientID, Nullable<bool> isOnDuty, Nullable<int> serviceCategoryID, Nullable<int> serviceTypeID, Nullable<int> serviceID, Nullable<int> userID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var isOnDutyParameter = isOnDuty.HasValue ?
                new ObjectParameter("IsOnDuty", isOnDuty) :
                new ObjectParameter("IsOnDuty", typeof(bool));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientDepositBalance_Result>("GetPatientDepositBalance", patientIDParameter, isOnDutyParameter, serviceCategoryIDParameter, serviceTypeIDParameter, serviceIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetPatientPreviousInvoices_Result> GetPatientPreviousInvoices(Nullable<int> patientID, Nullable<bool> isCompleted, Nullable<bool> isOnDuty, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("IsCompleted", isCompleted) :
                new ObjectParameter("IsCompleted", typeof(bool));
    
            var isOnDutyParameter = isOnDuty.HasValue ?
                new ObjectParameter("IsOnDuty", isOnDuty) :
                new ObjectParameter("IsOnDuty", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientPreviousInvoices_Result>("GetPatientPreviousInvoices", patientIDParameter, isCompletedParameter, isOnDutyParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetPreviousMedicalVisits_Result> GetPreviousMedicalVisits(Nullable<int> patientID, Nullable<bool> isOnDuty, Nullable<int> serviceID, Nullable<System.DateTime> visitTimingFrom, Nullable<System.DateTime> visitTimingTo, Nullable<int> userID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var isOnDutyParameter = isOnDuty.HasValue ?
                new ObjectParameter("IsOnDuty", isOnDuty) :
                new ObjectParameter("IsOnDuty", typeof(bool));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var visitTimingFromParameter = visitTimingFrom.HasValue ?
                new ObjectParameter("VisitTimingFrom", visitTimingFrom) :
                new ObjectParameter("VisitTimingFrom", typeof(System.DateTime));
    
            var visitTimingToParameter = visitTimingTo.HasValue ?
                new ObjectParameter("VisitTimingTo", visitTimingTo) :
                new ObjectParameter("VisitTimingTo", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPreviousMedicalVisits_Result>("GetPreviousMedicalVisits", patientIDParameter, isOnDutyParameter, serviceIDParameter, visitTimingFromParameter, visitTimingToParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetPreviousVisitTiming_EOMReading_Result> GetPreviousVisitTiming_EOMReading(Nullable<int> patientID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPreviousVisitTiming_EOMReading_Result>("GetPreviousVisitTiming_EOMReading", patientIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetPreviousVisitTiming_VisionRefractionReading_Result> GetPreviousVisitTiming_VisionRefractionReading(Nullable<int> patientID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPreviousVisitTiming_VisionRefractionReading_Result>("GetPreviousVisitTiming_VisionRefractionReading", patientIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetRawMaterialCostPrices_Result> GetRawMaterialCostPrices(Nullable<int> rawMaterialID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> userID)
        {
            var rawMaterialIDParameter = rawMaterialID.HasValue ?
                new ObjectParameter("RawMaterialID", rawMaterialID) :
                new ObjectParameter("RawMaterialID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRawMaterialCostPrices_Result>("GetRawMaterialCostPrices", rawMaterialIDParameter, fromDateParameter, toDateParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetSupplierBalance_Result> GetSupplierBalance(Nullable<int> supplierID, Nullable<int> invoiceTypeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSupplierBalance_Result>("GetSupplierBalance", supplierIDParameter, invoiceTypeIDParameter);
        }
    
        public virtual ObjectResult<GetTotalServiceAndDoctorRevenues_Result> GetTotalServiceAndDoctorRevenues(Nullable<int> invoiceTypeID, Nullable<int> serviceID, Nullable<int> serviceTypeID, Nullable<int> serviceCategoryID, Nullable<int> doctorID, Nullable<bool> isOnDuty, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var serviceCategoryIDParameter = serviceCategoryID.HasValue ?
                new ObjectParameter("ServiceCategoryID", serviceCategoryID) :
                new ObjectParameter("ServiceCategoryID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var isOnDutyParameter = isOnDuty.HasValue ?
                new ObjectParameter("IsOnDuty", isOnDuty) :
                new ObjectParameter("IsOnDuty", typeof(bool));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalServiceAndDoctorRevenues_Result>("GetTotalServiceAndDoctorRevenues", invoiceTypeIDParameter, serviceIDParameter, serviceTypeIDParameter, serviceCategoryIDParameter, doctorIDParameter, isOnDutyParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
